name: Build and Push Production Docker Images

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the images'
        required: true
        default: 'latest'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Auth service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/auth/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth:latest

      - name: Build and push Reservation service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/reservation/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/reservation:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/reservation:latest

      - name: Build and push Payment service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/payment/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment:latest

      - name: Build and push Notifications service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/notifications/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notifications:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notifications:latest

      - name: Create Release Summary
        if: github.event_name == 'release'
        run: |
          echo "## Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "The following images have been built and pushed:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/reservation:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notifications:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Mock deployment
        run: |
          echo "Mocking deployment of Auth Service..."
          echo "Mocking deployment of Reservation Service..."
          echo "Mocking deployment of Payment Service..."
          echo "Mocking deployment of Notifications Service..."
          
      - name: Mock deployment verification
        run: |
          echo "Mock Deployment Status:"
          echo "auth-deployment          1/1     Running   0          1m"
          echo "reservation-deployment   1/1     Running   0          1m"
          echo "payment-deployment       1/1     Running   0          1m"
          echo "notifications-deployment 1/1     Running   0          1m"
